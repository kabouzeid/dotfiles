has() {
    type "$1" &>/dev/null
}

if [ -z "$LANG" ]; then
    export LANG=en_US.UTF-8
fi

if [ -r /usr/share/zsh/share/antigen.zsh ]; then
    source /usr/share/zsh/share/antigen.zsh
elif [ -r /usr/local/share/antigen/antigen.zsh ]; then
    source /usr/local/share/antigen/antigen.zsh
elif [ -r /opt/homebrew/share/antigen/antigen.zsh ]; then
    source /opt/homebrew/share/antigen/antigen.zsh
elif [ -r "$HOME"/.local/share/zsh/share/antigen.zsh ]; then
    source "$HOME"/.local/share/zsh/share/antigen.zsh
fi

if has antigen; then
    antigen use oh-my-zsh
    antigen bundle git
    antigen bundle colored-man-pages
    antigen bundle rsync

    antigen bundle zsh-users/zsh-syntax-highlighting
    antigen bundle zsh-users/zsh-autosuggestions

    antigen apply

    if [ "$TERM" = "xterm-kitty" ]; then
        # disable ohmyzsh titles, use kitty's shell integration instead
        export DISABLE_AUTO_TITLE=true
    fi
fi

# set PATH so it includes user's private bin if it exists
if [ -d "$HOME"/bin ] ; then
    export PATH="$HOME"/bin:$PATH
fi

# set PATH so it includes user's private bin if it exists
if [ -d "$HOME"/.local/bin ] ; then
    export PATH="$HOME"/.local/bin:$PATH
fi

if [ -r /usr/share/fzf/key-bindings.zsh ]; then
    source /usr/share/fzf/key-bindings.zsh
elif [ -r /usr/local/opt/fzf/shell/key-bindings.zsh ]; then
    source /usr/local/opt/fzf/shell/key-bindings.zsh
elif [ -r /opt/homebrew/opt/fzf/shell/key-bindings.zsh ]; then
    source /opt/homebrew/opt/fzf/shell/key-bindings.zsh
elif [ -r "$HOME"/.local/share/zsh/share/fzf-key-bindings.zsh ]; then
    source "$HOME"/.local/share/zsh/share/fzf-key-bindings.zsh
fi

if [ -r "$HOME"/.linuxbrew/bin/brew ]; then
    eval "$("$HOME"/.linuxbrew/bin/brew shellenv)"
fi

if has zoxide; then
    eval "$(zoxide init zsh)"
fi

if has nvim; then
    export EDITOR='nvim'
elif has vim; then
    export EDITOR='vim'
elif has vi; then
    export EDITOR='vi'
fi

alias e=$EDITOR
alias v=$EDITOR

if has nvr; then
    if [ -n "$NVIM" ]; then
        alias e="nvr --remote-tab"
        alias v="nvr --remote-tab"
    fi
fi

if has hx; then
    alias hx="PATH=\"\$HOME/.local/share/nvim/mason/bin:\$PATH\" hx"
fi

if [ "$TERM" = "xterm-kitty" ] && has kitty; then
    alias ssh="kitty +kitten ssh"
    alias icat="kitty +kitten icat"
    alias diff="kitty +kitten diff"
elif [ "$TERM" = "foot" ]; then
    alias ssh="TERM=xterm-256color ssh"
fi

if [ -r "$HOME"/.iterm2_shell_integration.zsh ]; then
    source "$HOME"/.iterm2_shell_integration.zsh
fi

if has xdg-open && has setsid; then
    alias open="setsid xdg-open"
fi

if has op; then
    eval "$(op completion zsh)"; compdef _op op
fi

if has lazygit; then
    alias lzg="lazygit"
fi

if has lazydocker; then
    alias lzd="sudo $(which lazydocker)"
fi

if has swayhide; then
    alias hide="swayhide"
fi

if has difft; then
    alias gd="git difftool"
fi

if has brew; then
    alias bubc='brew upgrade && brew cleanup'
    alias bubo='brew update && brew outdated'
fi

if has "/Applications/Tailscale.app/Contents/MacOS/Tailscale"; then
    alias tailscale="/Applications/Tailscale.app/Contents/MacOS/Tailscale"
fi

export VIDIR_EDITOR_ARGS='-c :set nolist | :set ft=vidir'
if [ -r "$HOME"/.local/share/nvim/site/pack/packer/start/vidir/bin/vidir ]; then
    alias vidir="$HOME"/.local/share/nvim/site/pack/packer/start/vidir/bin/vidir
fi

# export BAT_THEME=base16 # works well with dark and light mode

# Allow local customizations in the ~/.zshrc_local file
if [ -r "$HOME"/.zshrc.local ]; then
    source "$HOME"/.zshrc.local
fi

if has starship; then
    eval "$(starship init zsh)"
fi
