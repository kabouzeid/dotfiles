# Corners

# dp: 4f
corner-radius = 4.8;
rounded-corners-exclude = [
  "class_g = 'Polybar'",
];
round-borders = 1;


# Shadows
#
# The Shadow is based on elevation of the Card Component in the Material Design
# Guidelines by Google
# (https://material.io/guidelines/components/cards.html#cards-content-blocks).
# Only the focused window (and program launcher) is raised with elevation of
# 8dp.  The resting (unfocused) windows have a elevation of 0dp as specified
# for desktop.
#
# The metrics for shadows in Sketch, Illustrator and Photoshop are specified in
# https://material.io/guidelines/resources/shadows.html.  The following is
# based on the drop shadow in Photoshop, because it is pixel based.  We can
# convert the shadow with parameters for opacity, angle, distance, spread and
# size of photoshop to the shadow with paramters for offset-x, offset-y,
# blur-radius, spread-radius and color of CSS which matches the parameters for
# shadow of picom quiet good.  If angle = 90, this conversion is given by
#
# blur-radius = size - spread,
# offset-x = 0,
# offset-y = distance,
# color = rbga(0, 0, 0, opacity),
# spread-radius = spread.
#
# This can be derived by the information given in
# https://2012.heygrady.com/blog/2011/08/06/recreating-photoshop-drop-shadows-in-css3-and-compass/
# and the fact that a 90 degree angle means that offset-y = distance.
#
# The metrics for a 8dp shadow in Photoshop are specified as follows.
#          key ambient
# opacity  24% 16%
# angle    90  90
# distance 13  5
# spread   6   2
# size     20  27
#
# Due to the fact that picom has no option to display spread, we set spread to
# 0 and get the following.
#          key  ambient
# radius   20   27
# x        0    0
# y        13   5
# opacity  0.24 0.16
# spread   0    0
#
# Picom can just draw one shadow, so we just draw the key shadow with the sum
# of both opacities.

shadow = true;

# Sets blur radius as calculated above
# dp:20
shadow-radius = 24;

# Sets opacity as calculated above
shadow-opacity = 0.40;

# Sets x offset as calculated above with the following formula for picom
# shadow-offset-x = x - shadow-radius
# dp:20
shadow-offset-x = -24;

# Sets y offset as calculated above with the following formula for picom
# shadow-offset-y = y - shadow-radius
# dp:15
shadow-offset-y = -18;

# Enables shadows just for focused windows and the program launcher (otherwise
# it would not have a shadow)
shadow-exclude = ["!focused && class_g != 'Rofi'"];


# Fading / Animations
#
# The fade in lasts 165ms and fade out lasts 150ms and a transition last 150ms.
# So they are in the 150ms-200ms range specified in
# https://material.io/guidelines/motion/duration-easing.html#duration-easing-common-durations.
# These times are approximately equivalent to the times for a element entering
# and leaving the screen on mobile in relation to the time range there.

# Enables fading
fading = true;

# Sets opacity change between steps while fading in, so that it last 1/0.066 *
# 10ms = 150ms
fade-in-step = 0.0666;

# Sets opacity change between steps while fading out, so that it last 1/0.061 *
# 10ms = 165ms
fade-out-step = 0.0606;

# Sets time between steps in a fade (in ms), so that there are more than 60
# steps per second
fade-delta = 10;

# Length of animation in milliseconds (default: 300)
transition-length = 150;

# Animation easing on the x-axis (default: 1.5)
transition-pow-x = 1.5;

# Animation easing on the y-axis (default: 1.5)
transition-pow-y = 1.5;

# Animation easing on the window width (default: 1.5)
transition-pow-w = 1.5;

# Animation easing on the window height (default: 1.5)
transition-pow-h = 1.5;

# Whether to animate window size changes (default: true)
size-transition = true;

# Whether to animate new windows from the center of the screen (default: false)
spawn-center-screen = false;

# Whether to animate new windows from their own center (default: true)
spawn-center = false;

# Whether to animate down scaling (some programs handle this poorly) (default:
# false)
no-scale-down = false;


# Transparency / Opacity
#
# Opacity is always 1 to match the idea of material specified in
# https://material.io/guidelines/material-design/material-properties.html

# Sets opacity everywhere to 1
inactive-opacity = 1.0;
frame-opacity = 1.0;
active-opacity = 1.0;

# Lets inactive windows not be dimmed to make them good readable and color
# accurate
inactive-dim = 0.0;

# Makes bspwm preselection tranparent
opacity-rule = [ "20:class_i = 'presel_feedback'" ];


# General Settings

experimental-backends = true
# Lets picom use fastest backend
backend = "glx";

vsync = true

mark-wmwin-focused = true;
mark-ovredir-focused = true;
detect-rounded-corners = true;
detect-client-opacity = true;

# Lets picom detect the refresh rate by itself
refresh-rate = 0

detect-transient = true
detect-client-leader = true
use-damage = false

log-level = "warn";
